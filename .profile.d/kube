#! /usr/bin/env bash

klog() {
    pod="$1"
    shift
    containers="$*"
    if [ -z "${pod}" ]; then
        echo 1>&2 "Usage: klog pod [container{1..3}]"
        return 1
    fi
    if [ -z "${containers}" ]; then
        containers=$(kubectl get pod "${pod}" -o jsonpath="{.spec.containers[*].name}")
    fi
    # shellcheck disable=SC2086
    xpanes -c "kubectl logs ${pod} --follow --tail 100 -c {} | grep -Ev 'health|metrics'" ${containers}
}

klogs() {
    deployment="$1"
    container="${2:-}"
    if [ -z "${deployment}" ]; then
        echo 1>&2 "Usage: klogs deployment [container]"
        return 1
    fi
    pods=$(kubectl get pods | grep -- "${deployment}" | awk '{print $1}')
    what="kubectl logs {} --follow --tail 100"
    if [ -n "${container}" ]; then
        what="${what} -c ${container}"
    fi
    what="${what} | grep -Ev 'health|metrics'"
    # shellcheck disable=SC2086
    xpanes -c "${what}" ${pods}
}

kgrep() {
    pod="$1"
    stuff="$2"
    if [ -z "${pod}" ] || [ -z "${stuff}" ]; then
        echo 1>&2 "Usage: kgrep pod stuff"
        return 1
    fi
    containers=$(kubectl get pod "${pod}" -o jsonpath="{.spec.containers[*].name}")
    # shellcheck disable=SC2086
    xpanes -c "kubectl logs ${pod} -c {} | grep -i ${stuff}" ${containers}
}

kexec() {
    pod="$1"
    if [ -z "${pod}" ]; then
        echo 1>&2 "Usage: kexec pod"
        return 1
    fi
    containers=$(kubectl get pod "${pod}" -o jsonpath="{.spec.containers[*].name}")
    if [ -z "$2" ]; then
        cmd="sh"
    else
        cmd="$2"
    fi
    # shellcheck disable=SC2086
    xpanes -c "kubectl exec -it ${pod} -c {} -- ${cmd}" ${containers}
}

kthrottled() {
    pod="$1"
    if [ -z "${pod}" ]; then
        echo 1>&2 "Usage: kthrottled pod"
        return 1
    fi
    kexec "$pod" "cat /sys/fs/cgroup/cpu/cpu.stat"
}

kimage() {
    pod="$1"
    if [ -z "${pod}" ]; then
        echo 1>&2 "Usage: kimage pod"
        return 1
    fi
    kubectl describe pod "${pod}" | grep Image:
}

kimages() {
    deployment="$1"
    if [ -z "${deployment}" ]; then
        echo 1>&2 "Usage: kimages deployment"
        return 1
    fi
    kubectl describe deployments.apps "${deployment}" | grep Image:
}

ktop() {
    pod="$1"
    watch -n 1 "kubectl top pod --use-protocol-buffers --containers ${pod}"
}

ktops() {
    deployment="$1"
    if [ -z "${deployment}" ]; then
        echo 1>&2 "Usage: ktops deployment"
        return 1
    fi
    pods=$(kubectl get pods | grep -- "${deployment}" | awk '{print $1}')
    what="watch -n 1 kubectl top pod --use-protocol-buffers --containers {}"
    # shellcheck disable=SC2086
    xpanes -c "${what}" ${pods}
}

kpods() {
    if [ -z "${1:-}" ]; then
        kubectl get pods
    else
        watch -n 1 "kubectl get pods | grep -- $1"
    fi
}

kgd() {
    if [ -z "${1:-}" ]; then
        kubectl get deployments.apps
    else
        kubectl get deployments.apps | grep -- "$1"
    fi
}

krs() {
    deployment="$1"
    if [ -z "${deployment}" ]; then
        echo 1>&2 "Usage: krs deployment"
        return 1
    fi
    kubectl rollout restart deployments.apps -- "$1"
}

k() {
    kubectl config get-contexts | sed -E 's/(^\*.*)$/[91m\1[0m/g'
}

knotrunning() {
    kubectl get pods | grep -Ev '\<Running\>|\<Completed\>'
}

kclean() {
    kubectl get pods -ojson \
        | jq -r '.items[] | select(.status.reason!=null) | select(.status.reason | contains("Evicted")) | .metadata.name' \
        | xargs -r kubectl delete pods
}

alias knodes="kubectl get nodes -o wide"
alias khelp="kubectl api-resources | sort"

# ignore kubectl plugins, they only pollute shell completion
export EXECIGNORE="*/kubectl-*:${EXECIGNORE}"
