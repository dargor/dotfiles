#! /usr/bin/env bash

_docker_log()
{
    echo "[93m>>> [94m$*[0m"
}

docker_pull_images() {
    for image in $(docker images | grep ^docker.io/ | awk '{print $1 ":" $2}'); do
        image="${image#docker.io/}"
        _docker_log "Pulling $image"
        docker pull --platform linux/amd64 "$image"
    done
}

docker_clean_containers()
{
    _docker_log "Cleaning containers"
    for container in $(docker ps -aq); do
        docker stop -t 0 "${container}"
        docker rm -f "${container}"
    done
}

docker_clean_images()
{
    if [ "$1" = "all" ]; then
        _docker_log "Cleaning all images"
        docker images -q | xargs -r docker rmi -f --
        return $?
    fi
    if [ "$1" = "force" ]; then
        _docker_log "Cleaning unused images (forced)"
        rmi="-f"
    else
        _docker_log "Cleaning unused images"
        rmi=""
    fi
    docker images | grep '<none>' | while read -r line; do
        img=$(echo "$line" | awk '{print $3}')
        if [ "$img" != "IMAGE ID" ]; then
            docker rmi "$rmi" "$img"
        fi
    done
}

docker_clean_images_prefix()
{
    prefix="$1"
    if [ -z "${prefix}" ]; then
        echo 1>&2 "Usage: docker_clean_images_prefix prefix"
        return 1
    fi
    _docker_log "Cleaning images starting with [95m${prefix}[0m"
    # REPOSITORY:TAG
    docker images \
        | grep "^${prefix}" \
        | awk '{print $1 ":" $2}' \
        | xargs -r docker rmi --
    # IMAGE ID
    docker images \
        | grep "^${prefix}" \
        | awk '{print $3}' \
        | xargs -r docker rmi --
}

docker_clean_networks()
{
    _docker_log "Cleaning networks"
    docker network ls -q | xargs -r docker network rm --
}

docker_clean_volumes()
{
    _docker_log "Cleaning volumes"
    docker volume ls -q | xargs -r docker volume rm --
}

docker_prune()
{
    _docker_log "Pruning docker"
    docker system prune -f
}

docker_summary()
{
    _docker_log "Summary"
    docker system df
}

docker_clean()
{
    docker_clean_containers
    docker_clean_images "${1:-}"
    docker_clean_networks
    docker_clean_volumes
    docker_prune
    docker_summary
}

docker_raz()
{
    docker_clean all
}

docker_images_architectures()
{
    for image in $(docker images -q); do
        name=$(docker inspect -f json "$image" | jq -r '.[].RepoTags[0]')
        [ "$name" = null ] && continue
        arch=$(docker inspect -f json "$image" | jq -r '.[].Architecture')
        case "$arch" in
            amd64)
                color=92
                ;;
            arm64)
                color=91
                ;;
            *)
                color=93
                ;;
        esac
        echo "[94m$name[0m uses [${color}m$arch[0m"
    done
}

docker_run() {
    image="$1"
    if [ -z "$image" ]; then
        echo 1>&2 "Usage: docker_run image [what]"
        return 1
    fi
    what="${2:-/bin/bash}"
    docker run --rm --entrypoint "$what" -it "$image"
}
