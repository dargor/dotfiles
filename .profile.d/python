#! /usr/bin/env bash

alias 3='. ~/python3/activate'
alias 311='. ~/python311/activate'

_venv_ensure_base_packages() {
    pip="${1:-pip}"
    for package in pip wheel setuptools packaging build Cython python-lsp-server flake8 ruff-lsp; do
        "${pip}" install -U "${package}"
    done
}

mkvenv() {
    version="${1:-}"
    name="${2:-}"
    vanilla="${3:-}"
    if [ -z "${version}" ]; then
        echo 1>&2 "Usage: mkvenv version [name] [vanilla]"
        return 1
    fi
    if [ -z "${name}" ]; then
        name=".venv"
        echo 1>&2 "Creating an anonymous virtual environment in ${name}"
    else
        echo 1>&2 "Creating a virtual environment in ${name}"
    fi
    bin="python${version}"
    if [ ! "$(type -P "${bin}")" ]; then
        echo 1>&2 "${bin} not found"
        return 1
    fi
    if [ -d "${name}" ]; then
        echo 1>&2 "${name} already exists"
        return 1
    fi
    "${bin}" -m venv "${name}"
    pip="${name}/bin/pip"
    if [ ! -x "${pip}" ]; then
        echo 1>&2 "${pip} not found"
        return 1
    fi
    _venv_ensure_base_packages "${pip}"
    if [ -z "${vanilla}" ]; then
        "${pip}" install -U \
            envdir python-dotenv \
            pipdeptree pip-upgrader \
            bandit radon interrogate mypy vulture \
            ipython ipdb bpython ptpython \
            pretty-errors
    fi
    echo "${name} is ready"
}

upvenv() {
    if [ -z "${VIRTUAL_ENV}" ]; then
        echo 1>&2 "Not in a virtual environment"
        return 1
    fi
    _venv_ensure_base_packages
    # update everything without consideration for broken dependencies
    while read -r p; do
        pip install --no-warn-conflicts -U "$p"
    done < <(pip list --outdated --format json | jq -r '.[].name')
    # handle broken dependencies
    for n in {0..9}; do
        x=0
        while read -r p; do
            [ "$p" = "No" ] && break
            pip install --no-warn-conflicts -U "$p"
            ((x+=1))
        done < <(pip check | awk '{print $1}' | sort | uniq)
        [ "$x" -eq 0 ] && break
    done
    # did it work ?
    if [ "$n" -eq 9 ]; then
        echo 1>&2 "[91mError: Direct intervention is necessary.[0m"
        return 1
    fi
    # we are up to date
    echo "${VIRTUAL_ENV##*/} is ready"
}

flvenv() {
    if [ -z "${VIRTUAL_ENV}" ]; then
        echo 1>&2 "Not in a virtual environment"
        return 1
    fi
    _venv_ensure_base_packages
    pip install -U \
        flake8 \
        flake8-bugbear \
        flake8-builtins \
        flake8-commas \
        flake8-comprehensions \
        flake8-isort \
        flake8-logging-format \
        flake8-quotes \
        flake8-return \
        flake8-simplify \
        flake8-unused-arguments \
        flake8-use-fstring
}

pyleaves() {
    pipdeptree -j \
        | jq -r '[.[].package.package_name] - [.[].dependencies[].package_name] | .[]'
}

clpy() {
    rm -rf -- build dist *.egg-info
    find -L . -not -path './.git/*' -a \(  \
              -iname __pycache__   -print0 \
           -o -iname '*.py[co]'    -print0 \
           -o -iname .mypy_cache   -print0 \
           -o -iname .pytest_cache -print0 \
           -o -iname .ruff_cache   -print0 \
           -o -iname .hypothesis   -print0 \
           -o -iname .coverage     -print0 \
           -o -iname .tox          -print0 \
           -o -iname report.html   -print0 \
           -o -iname tags          -print0 \
    \) | xargs -r0 rm -rf --
}
