{
  "models": [
    {
      "provider": "openai",
      "apiBase": "http://localhost:1337/v1",
      "title": "Qwen 2.5 Coder",
      "model": "qwen2.5-coder",
      "contextLength": 8192
    }
  ],
  "tabAutocompleteModel": {
    "provider": "openai",
    "apiBase": "http://localhost:1336/v1",
    "title": "Qwen 2.5 Coder",
    "model": "qwen2.5-coder",
    "contextLength": 8192
  },
  "tabAutocompleteOptions": {
    "multilineCompletions": "never"
  },
  "embeddingsProvider": {
    "provider": "huggingface-tei",
    "apiBase": "http://localhost:1338"
  },
  "systemMessage": "You are Qwen, created by Alibaba Cloud. You are a helpful assistant. You will work in tandem with a human engineer on code generation, debugging and optimization.",
  "reranker": {
    "name": "huggingface-tei",
    "params": {
      "apiBase": "http://localhost:1339"
    }
  },
  "customCommands": [
    {
      "name": "explain",
      "description": "Explain highlighted code",
      "prompt": "{{{ input }}}\n\nExplain what the selected code does, but without explaining it line by line. Give a general overview of the code, why it might have been implemented this way, its purpose, its quirks, and possible improvements, if any."
    },
    {
      "name": "review",
      "description": "Review highlighted code",
      "prompt": "{{{ input }}}\n\nReview the selected code and check it for any mistakes. Make sure it follows established best practices, is clean, efficient and maintainable. Pay close attention to common mistakes like syntax errors, logic errors, security vulnerabilities, performance and scalability issues, or anything that seems questionable. For each mistake found, explain what is wrong and how to correct or improve it. Give your answer as one bullet point per mistake found."
    },
    {
      "name": "test",
      "description": "Write unit tests for highlighted code",
      "prompt": "{{{ input }}}\n\nWrite a comprehensive set of unit tests for the selected code. It should setup, run tests that check for correctness including important edge cases, and teardown. Ensure that the tests are complete and sophisticated. Give your answer as chat output, do not edit any file nor explain the tests themselves. For python code, use pytest."
    }
  ],
  "contextProviders": [
    {
      "name": "file"
    },
    {
      "name": "code"
    },
    {
      "name": "diff"
    },
    {
      "name": "terminal"
    },
    {
      "name": "open"
    },
    {
      "name": "web"
    },
    {
      "name": "codebase"
    },
    {
      "name": "folder"
    },
    {
      "name": "search"
    },
    {
      "name": "url"
    },
    {
      "name": "tree"
    },
    {
      "name": "repo-map"
    }
  ],
  "slashCommands": [
    {
      "name": "share",
      "description": "Export the current chat session to markdown"
    },
    {
      "name": "cmd",
      "description": "Generate a shell command"
    },
    {
      "name": "commit",
      "description": "Generate a commit message"
    },
    {
      "name": "onboard",
      "description": "Familiarize yourself with the codebase"
    }
  ],
  "ui": {
    "showChatScrollbar": true
  }
}
